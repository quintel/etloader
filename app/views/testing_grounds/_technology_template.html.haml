.technology{class: technology_class(technology), data: stringify_values(technology.attributes.slice(*InstalledTechnology::EDITABLES).merge(node: node)) }
  .advanced-actions.pull-right.btn-group
    = link_to "Toggle advanced", "#!", class: "btn btn-primary btn-sm show-advanced"

    = link_to "#!", class: "remove-row btn btn-danger btn-sm" do
      %span.glyphicon.glyphicon-trash

  .indent.arrow{class: ('hidden' unless technology.buffer.present?) }

  .wrapper-tech
    %strong= technology.name
    .editable.profile.select{class: ('hidden' if technology.buffer.present?) }
      %span Profile
      %select.profile.form-control{autocomplete: 'off', data: { type: 'profile' }}

    .editable.buffer.select{class: ('hidden' unless technology.buffer.present?) }
      %span Buffer
      %select.buffer.form-control{autocomplete: 'off', data: { type: 'buffer' }}

    .editable.position_relative_to_buffer{class: ('hidden' unless technology.position_relative_to_buffer.present?)}
      %span Position technology
      - %w(boosting buffering).each do |position|
        %label.radio-inline{class: ('active' if position == technology.position_relative_to_buffer)}
          %input{type: 'radio', value: 'after', name: technology.position_relative_to_buffer_name, checked: ('checked' if position == technology.position_relative_to_buffer), value: position, data: {type: 'position_relative_to_buffer'} }/
          = position.humanize

      = tooltip_tag(t(:'testing_grounds.form.position_relative_to_buffer.tooltip'))

      .clearfix

    .editable.battery-slider{class: ('hidden' unless technology.is_battery?) }
      %span Congestion reserve
      %span.tick.min 0%
      %input.slider{data: {'slider-min' => 0, 'slider-max' => 100, 'slider-step' => 1, 'slider-value' => technology.congestion_reserve_percentage, 'type' => 'congestion_reserve_percentage'}}
      %span.tick.max 100%
      %span.tick.value
        = "#{ technology.congestion_reserve_percentage.to_i }%"
      = tooltip_tag(t(:'testing_grounds.form.congestion_reserve_percentage.tooltip'))
      .clearfix

    .editable.text{class: 'capacity'}
      %span Output capacity [kW]
      %input.form-control{type: 'text', value: technology.capacity.try(:round, 4), data: { type: 'capacity' } }
      .clearfix

    .editable.text{class: 'demand'}
      %span Demand [kWh]
      %input.form-control{type: 'text', value: technology.demand.try(:round, 2), data: { type: 'demand'} }
      .clearfix

    .editable.text{class: 'carrier_capacity'}
      %span
        %span.tick> Input capacity (
        %span.tick.carrier>= technology.carrier
        %span.tick ) [kW]
      %input.form-control{type: 'text', value: technology.carrier_capacity.try(:round, 4), disabled: "disabled", data: { type: 'carrier_capacity' } }
      .clearfix

    .editable.text{class: 'volume'}
      %span Volume [kWh]
      %input.form-control{type: 'text', value: technology.volume, data: { type: 'volume' }}
      .clearfix

    .editable.text{class: 'units'}
      %span Units
      %input.form-control{type: 'text', value: technology.units, data: { type: 'units' }}
      .clearfix

    - InstalledTechnology.attribute_set.each do |attribute|
      - if attribute.options[:hidden]
        .editable.hidden{class: attribute.name}
          %input.form-control{type: 'text', value: technology.public_send(attribute.name), data: { type: attribute.name } }

      - if attribute.options[:advanced]
        .editable.advanced.hidden{class: attribute.name}
          %span= t(:"installed_technology_attributes.#{ attribute.name }")
          %input.form-control{type: 'text', value: technology.public_send(attribute.name), data: { type: attribute.name } }
          .clearfix

    .clearfix

  .clearfix
